# from laptop
table inet filter {
	# rules:
	# accept anything on the loopback
	# accept anything ct related,established
	# drop icmpv6 nd-redirect
	# drop icmpv6 node information queries (139, not in nftables?? says see rfc:139#4890)
	# accept icmpv6
	# accept icmp echo-request
	# accept daddr fe80::/64 udp deport 546 (dhcpv6 client)
	# log&refuse anthing else (it splits by non-unicast vs unicast)
}

# TODO: prob don't want RPF on a router?
table inet mangle {
	# return using saddr, mark, iff, find oif and check if non-zero (rpf)
	# return udp sport 67 udp dport 68 return (dhcp clientv6)
	# return saddr 0.0.0.0 daddr 255.255.255.255 udp sport 68 udp dport 67 (dhcpv4 server)
	# drop otherwise
}

# from pfsense
	# dnat (port forward)
	# tcp @wan:30000 --> 192.168.1.2:30000 (??)
	# tcp @wan:55000 --> 192.168.1.5:55000 (roon arc)
	# tcp @wan:32400 --> 192.168.1.5:32400 (plex)

  # snat (on wan)
	# 192.168.1.2 --> wan [static] (wildcard for tekken until the right ports are figured out)
	# 192.168.1.2:udp/3097 --> udp/* wan [static] (destiny 2 upnp)
	# 192.168.1.2:udp/3074 --> udp/* wan [static] (destiny 2/tekken? upnp)
	# automatic snat (wan)
	# {127.0.0.0/8, ::1/128, 192.168.{1,2,3}.0/24} --> :500 wan [static] (ISAKMP -- what is this -- it's for ipsec clients)
	# {127.0.0.0/8, ::1/128, 192.168.{1,2,3}.0/24} --> wan [random] (general nat)

	# rules (filter?)
	# wan interface
	# block saddr { rfc:1918 networks }
	# accept daddr @wan dport 51820 (wireguard)
	# [nat rules]
	# lan interface
	# allow daddr @lan dport { 443,80,22 } (any queue? antilockout)
	# allow saddr @lan (allow lan to any)
	# wlan interface
	# allow saddr @wlan (allow wlan to any)
	# iot interface
	# allow saddr @iot (allow iot to any)

	# bonus pfsense?? (from raw rules)
	# block from/to link local addr (169.254./16) per rfc:3927?
	# allow icmpv6 { unreach, toobig, neighbor sol, neighbor adv }
	# allow icmpv6 { echoresp,router sol, router adv, neighbor sol, neighbor adv } between { fe80::/10, ff02::/16 } (certain combos are out vs in)
	# block traffic from/to port 0
	# block snort2c?
	# allow dhcp
	# ... (TODO: finish -- /tmp/rules.debug)

# TODO: flow offloading (in hook forward)

# francis
	# flowtable wan <-> lan
	# output [accept] (everything out of the router)
	# input [drop]
		# allow from lan (lan can access the router itself)
		# allow from wan ct state { established, related } 
		# avahi rules (allow from chromecast to tcp :llmnr, udp { :mdns, :llmnr }
		# drop everything else from wan
	# forward [drop]
		# offload { tcp, udp }
		# allow lan --> wan
		# allow wan --> lan ct state { established, related }
		# avahi rules (chromecast --> wan tcp --> { :80, :443 }, chromecast --> lan)
	# prerouting [accept]
	# postrouting [accept]
		# --> wan masquerade
	
